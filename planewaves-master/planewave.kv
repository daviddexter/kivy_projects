#:import SaveDialog main.SaveDialog

<TimeSlider>:
    title: 'Period of oscillation (seconds)'
    size_hint_y: None
    height: sp(150)
    size_hint_x: None
    width: min(0.9*app.root.width, sp(500))
    time_rate: slider.value
    time_active: cb.active
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            Label:
                text: 'enable time?'
            CheckBox:
                id: cb
                active: False
        Label:
            text: 'current period: {}'.format(slider.value)
            color: (1, 1, 1, 1) if cb.active else (0.5, 0.5, 0.5, 1)
        Slider:
            id: slider
            disabled: not cb.active
            min: 0.1
            max: 10
            step: 0.01

<SaveDialog>:
    shader_size: app.root.shader_widget.size
    shader_ratio: self.shader_size[1] / float(self.shader_size[0])
    image_x: int(root.shader_size[0]*scaler.value)
    image_y: int(root.shader_size[1]*scaler.value)

    size_hint: (None, None)
    size: (sp(290), sp(440))

    title: 'Set save parameters...'
    AnchorLayout:
        BoxLayout:
            size_hint: 0.95, 0.95
            orientation: 'vertical'
            Label:
                text_size: self.size
                halign: 'left'
                text: 'Saving the image may take a few seconds, especially on slow android storage. It will be faster to save a smaller image.'
            Label:
                text: 'Image scale factor:'
                halign: 'left'
                valign: 'middle'
                text_size: self.size
            Slider:
                id: scaler
                min: 0
                max: 1
                value: 1
                size_hint_y: None
                height: sp(30)
            Label:
                text_size: self.size
                halign: 'center'
                valign: 'middle'
                text: 'image size: {}x{}\ntotal pixels: {}'.format(root.image_x, root.image_y, root.image_x*root.image_y)
            BoxLayout:
                orientation: 'horizontal'
                size_hint_y: None
                height: sp(40)
                Button:
                    text: 'Cancel'
                    on_press: root.dismiss()
                Button:
                    text: 'Save'
                    on_press: app.save_image(size=(root.image_x, root.image_y)); root.dismiss()

<WavevectorMaker>:
    canvas:
        Color:
            rgba: 0, 0, 0, 1.0 if self.axes else 0
        Line:
            width: 2
            points: [self.x+0.5*self.width, self.y, self.x+0.5*self.width, self.y+self.height]
        Line:
            width: 2
            points: [self.x, self.y+0.5*self.height, self.x+self.width, self.y+0.5*self.height]

<PlaneWaveShader>:
    canvas:
        Color:
            rgb: 1, 0, 0
        Rectangle:
            pos: self.pos
            size: self.size
    on_shader_mid: self.replace_shader()
    on_shader_bottom: self.replace_shader()

<AppLayout>:
    orientation: 'vertical'
    wavevector_layout: wv_layout
    shader_widget: shader
    ActionBar:
        ActionView:
            use_separator: True
            ActionPrevious:
                title: ''
                with_previous: False
                app_icon: 'media/icon_fade1.png'
                minimum_width: 1.2*self.height
                # size_hint_x: None
                # width: 1.2*self.height
            ActionOverflow:
            ActionButton:
                text: 'intensity'
                on_press: shader.mode = 'intensity'
            ActionSeparator:
            ActionButton:
                text: 'phase'
                on_press: shader.mode = 'phase'
            ActionSeparator:
            ActionButton:
                text: 'both'
                on_press: shader.mode = 'both'
            ActionSeparator:
            ActionButton:
                text: 'time'
                on_press: app.raise_time_slider()
            ActionSeparator:
            ActionButton:
                text: 'toggle\n axes'
                on_press: wv_layout.toggle_axes()
            ActionSeparator:
            ActionButton:
                text: 'reset'
                on_press: wv_layout.reset()
            ActionSeparator:
            ActionButton:
                text: 'save'
                on_press: SaveDialog().open()
    Widget:
        id: container
        PlaneWaveShader:
            id: shader
            pos: container.pos
            size: container.size
        WavevectorMaker:
            id: wv_layout
            pos: container.pos
            size: container.size
            shader_widget: shader

<WvMarker>:
    size: sp(40), sp(40)
    size_hint: None, None
    opacity: 0.3
    canvas:
        Color:
            rgba: 0, 0, 0, 1
        Ellipse:
            pos: self.pos
            size: self.size
        Color:
            rgb: self.colour
        Ellipse:
            pos: self.x+0.1*self.width, self.y+0.1*self.height
            size: 0.8*self.width, 0.8*self.height